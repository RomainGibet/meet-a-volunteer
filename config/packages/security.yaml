security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: pseudo
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\BackOfficeAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:       

        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

        ### PATHS FOR USER
        - { path: ^/api/user, roles: [ROLE_USER], methods: [PUT, PATCH, DELETE] }
        - { path: ^/api/user, roles: [PUBLIC_ACCESS], methods: [GET, POST] }

        ###PATHS for BACK OFFICE

        - { path: ^/back/login, roles: [PUBLIC_ACCESS] }
        - { path: ^/back/user, roles: [ROLE_ADMIN] }
        - { path: ^/back, roles: [ROLE_MODERATOR] }
        
        ###PATHS for MESSAGE

        - { path: ^/api/receivedMessages, roles: [ROLE_USER] }
        - { path: ^/api/sentMessages, roles: [ROLE_USER] }
        - { path: ^/api/message, roles: [ROLE_USER], methods: [POST, PUT, PATCH, DELETE] }

        ###PATHS for EXPERIENCE

        - { path: ^/api/experience, roles: [PUBLIC_ACCESS], methods: [GET] }
        - { path: ^/api/experience, roles: [ROLE_USER], methods: [POST, PUT, PATCH, DELETE] }

        ###PATHS for THEMATIC

        - { path: ^/api/thematic, roles: [PUBLIC_ACCESS] }

        ###PATHS for VOLUNTEERING TYPE

        - { path: ^/api/volunteeringType, roles: [PUBLIC_ACCESS] }

        ###PATHS for RECEPTION STRUCTURE

        - { path: ^/api/receptionStructure, roles: [PUBLIC_ACCESS] }




    role_hierarchy:
        # ADMIN has same rights than MODERATOR       
        ROLE_ADMIN : ROLE_MODERATOR
        # MODERATOR has same rights than USER
        ROLE_MODERATOR : ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
